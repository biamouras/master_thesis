stringi::stri_encode(., 'CP858', to = 'UTF-8)
nome_arq <- unzip(file.path(dir_dados, 'Amostra_documentacao.zip'),
nome_arq <- unzip(file.path(dir_dados, 'Amostra_documentacao.zip'),
list = T) %>%
unlist() %>%
stringr::str_subset(., 'Layout_microdados_Amostra.xls') %>%
stringi::stri_encode(., 'CP858', to = 'UTF-8')
nome_arq
nome_arq <- unzip(file.path(dir_dados, 'Amostra_documentacao.zip'),
list = T) %>%
unlist() %>%
stringr::str_subset(., 'Layout_microdados_Amostra.xls') %>%
stringi::stri_encode(., 'UTF-8', to = '850')
nome_arq
nome_arq <- unzip(file.path(dir_dados, 'Amostra_documentacao.zip'),
list = T) %>%
unlist() %>%
stringr::str_subset(., 'Layout_microdados_Amostra.xls') %>%
stringi::stri_encode(., 'UTF-8', to = 'CP850')
stringi::stri_enc_detect()
stringi::stri_enc_detect("Documenta\177\177o/Layout/Layout_microdados_Amostra.xls")
stringi::stri_encode(., ISO-8859-1')
nome_arq <- unzip(file.path(dir_dados, 'Amostra_documentacao.zip'),
nome_arq <- unzip(file.path(dir_dados, 'Amostra_documentacao.zip'),
list = T) %>%
unlist() %>%
stringr::str_subset(., 'Layout_microdados_Amostra.xls') %>%
stringi::stri_encode(., 'ISO-8859-1')
nome_arq
nome_arq <- unzip(file.path(dir_dados, 'Amostra_documentacao.zip'),
list = T) %>%
unlist() %>%
stringr::str_subset(., 'Layout_microdados_Amostra.xls') %>%
stringi::stri_encode(., '850')
nome_arq
nome_arq <- unzip(file.path(dir_dados, 'Amostra_documentacao.zip'),
list = T) %>%
unlist() %>%
stringr::str_subset(., 'Layout_microdados_Amostra.xls') %>%
stringi::stri_encode(.)
nome_arq
stringi::stri_enc_detect("Documentação")
nome_arq <- unzip(file.path(dir_dados, 'Amostra_documentacao.zip'),
list = T) %>%
unlist() %>%
stringr::str_subset(., 'Layout_microdados_Amostra.xls') %>%
stringi::stri_encode(., '850')
nome_arq <- unzip(file.path(dir_dados, 'Amostra_documentacao.zip'),
list = T) %>%
unlist() %>%
stringr::str_subset(., 'Layout_microdados_Amostra.xls') %>%
stringi::stri_encode(., '850')
nome_arq
stringi::stri_enc_list()
nome_arq <- unzip(file.path(dir_dados, 'Amostra_documentacao.zip'),
list = T) %>%
unlist() %>%
stringr::str_subset(., 'Layout_microdados_Amostra.xls') %>%
stringi::stri_encode(., 'IBM850')
nome_arq <- unzip(file.path(dir_dados, 'Amostra_documentacao.zip'),
list = T) %>%
unlist() %>%
stringr::str_subset(., 'Layout_microdados_Amostra.xls') %>%
stringi::stri_encode(., 'IBM850')
nome_arq
?unzip
nome_arq <- unzip(file.path(dir_dados, 'Amostra_documentacao.zip'),
list = T) %>%
unlist() %>%
stringr::str_subset(., 'Layout_microdados_Amostra.xls')
nome_arq
unzip(file.path(dir_dados, 'Amostra_documentacao.zip'),
files = nome_arq,
exdir = dir_dados)
nome_arq <- unzip(file.path(dir_dados, 'Amostra_documentacao.zip'),
list = T) %>%
unlist() %>%
stringr::str_subset(., 'Layout_microdados_Amostra.xls')
unzip(file.path(dir_dados, 'Amostra_documentacao.zip'),
files = nome_arq,
exdir = dir_dados)
nome_arq <- unzip(file.path(dir_dados, 'Amostra_documentacao.zip'),
list = T) %>%
unlist() %>%
stringr::str_subset(., 'Layout_microdados_Amostra.xls')
unzip(file.path(dir_dados, 'Amostra_documentacao.zip'),
exdir = dir_dados)
unzip(file.path(dir_dados, 'Amostra_documentacao.zip'),
files = nome_arq,
exdir = dir_dados,
unzip = 'unzip')
??zip
# identifica o caminho dentro do zip
nome_arq <- unzip(file.path(dir_dados, 'Amostra_documentacao.zip'),
list = T) %>%
unlist() %>%
str_subset(., 'Layout_microdados_Amostra.xls') %>%
stringi::str_encode(.,'latin1')
# identifica o caminho dentro do zip
nome_arq <- unzip(file.path(dir_dados, 'Amostra_documentacao.zip'),
list = T) %>%
unlist() %>%
str_subset(., 'Layout_microdados_Amostra.xls') %>%
stringi::stri_encode(.,'latin1')
nome_arq
nome_arq <- unzip(file.path(dir_dados, 'Amostra_documentacao.zip'),
list = T) %>%
unlist() %>%
str_subset(., 'Layout_microdados_Amostra.xls')
Encoding(nome_arq) <- 'latin1'
nome_arq
Encoding(nome_arq) <- 'ISO-8859-1'
nome_arq
Encoding(nome_arq) <- 'cp850'
nome_arq
Encoding(nome_arq) <- 'IBM850'
nome_arq
Encoding(nome_arq) <- '850'
nome_arq
Encoding(nome_arq) <- 'UTF-8'
nome_arq
nome_arq <- unzip(file.path(dir_dados, 'Amostra_documentacao.zip'),
list = T) %>%
unlist() %>%
str_subset(., 'Layout_microdados_Amostra.xls')
Encoding(nome_arq) <- 'UTF-8'
nome_arq
#| echo: false
# identifica o caminho dentro do zip
nome_arq <- unzip(file.path(dir_dados, 'Amostra_documentacao.zip'),
list = T) %>%
unlist() %>%
str_subset(., 'Layout_microdados_Amostra.xls') %>%
stringi::stri_encode(.,'latin1')
#| echo: false
# identifica o caminho dentro do zip
nome_arq <- unzip(file.path(dir_dados, 'Amostra_documentacao.zip'),
list = T) %>%
unlist() %>%
str_subset(., 'Layout_microdados_Amostra.xls') %>%
stringi::stri_encode(.,'latin1')
nome_arq
#| echo: false
# identifica o caminho dentro do zip
nome_arq <- unzip(file.path(dir_dados, 'Amostra_documentacao.zip'),
list = T) %>%
unlist() %>%
str_subset(., 'Layout_microdados_Amostra.xls') %>%
stringi::stri_encode(.,'CP1252')
nome_arq
# pasta com os dados
dir_dados <- file.path(dir_proj, 'data', 'population', 'census2010')
dir_dados
#| echo: false
# bibliotecas necessárias
library(tidyverse)
library(sf)
library(mipfp)
# pasta do projeto
dir_proj <- here::here()
# pasta com os dados
dir_dados <- file.path(dir_proj, 'data', 'population', 'census2010')
# leitura do dicionário da amostra
dic_amostra <- readxl::read_xls(
file.path(dir_dados, 'Layout_microdados_Amostra.xls'),
sheet = 'DOMI',
range = 'A2:L78'
) %>%
# renomeia colunas
rename(
POSICAO_INICIAL = `POSIÇÃO INICIAL`,
POSICAO_FINAL = `POSIÇÃO FINAL`
) %>%
# seleciona colunas de interesse
select(
'VAR', 'NOME', 'POSICAO_INICIAL', 'POSICAO_FINAL',	'INT', 'DEC', 'TIPO'
)
# leitura do dicionário da amostra
dic_amostra <- readxl::read_xls(
file.path(dir_dados, 'Layout_microdados_Amostra.xls'),
sheet = 'DOMI',
range = 'A2:L78'
) %>%
# renomeia colunas
rename(
POSICAO_INICIAL = `POSIÇÃO INICIAL`,
POSICAO_FINAL = `POSIÇÃO FINAL`
) %>%
# seleciona colunas de interesse
select(
'VAR', 'NOME', 'POSICAO_INICIAL', 'POSICAO_FINAL',	'INT', 'DEC', 'TIPO'
)
#| echo: false
# leitura do dicionário da amostra
dic_amostra <- readxl::read_xls(
file.path(dir_dados, 'Layout_microdados_Amostra.xls'),
sheet = 'DOMI',
range = 'A2:L78'
) %>%
# renomeia colunas
rename(
POSICAO_INICIAL = `POSIÇÃO INICIAL`,
POSICAO_FINAL = `POSIÇÃO FINAL`
) %>%
# seleciona colunas de interesse
select(
'VAR', 'NOME', 'POSICAO_INICIAL', 'POSICAO_FINAL',	'INT', 'DEC', 'TIPO'
)
ajusta_decimal <- function(x){
# seleciona a linha da variável no dicionário
dic_var <- filter(dic_amostra, VAR == cur_column())
novo_x <- paste0(
str_sub(x, end = dic_var$INT),
'.',
str_sub(x, start = dic_var$INT+1, end = dic_var$INT+dic_var$DEC))
novo_x <- as.numeric(novo_x)
return(novo_x)
}
# microdados da amostra
df_amostra <- vroom::vroom_fwf(
file = file.path(dir_dados, 'Amostra_Domicilios_35_RMSP.txt'),
col_positions = vroom::fwf_positions(
start = dic_amostra$POSICAO_INICIAL,
end = dic_amostra$POSICAO_FINAL,
col_names = dic_amostra$VAR
),
col_select = c('V0001', 'V0002','V0010', 'V0300',
'V0011', 'V6532', 'V6530')) %>%
# ajustando casas decimais
mutate(
across(
.cols = c('V0010', 'V6532', 'V6530'),
.fns = ajusta_decimal
)
)
df_universo <- read_delim(
'./data/population/census2010/DomicilioRenda_SP1.csv',
delim = ';',
na = 'X'
)
df_universo <- read_delim(
file.path(dir_dados, 'DomicilioRenda_SP1.csv'),
delim = ';',
na = 'X'
)
# relação entre áreas de ponderação (amostra) e setores censitários
relacao_areap_setor <- read_tsv(
'./data/population/census2010/Composicao das Areas de Ponderacao.txt',
locale = locale(encoding = 'UTF-16')
) %>% #filtra apenas município de São Paulo
filter(str_sub(Setor, 1, 7) == '3550308')
df_universo <- read_delim(
file.path(dir_dados, 'DomicilioRenda_SP1.csv'),
delim = ';',
na = 'X'
)
# relação entre áreas de ponderação (amostra) e setores censitários
relacao_areap_setor <- read_tsv(
file.path(dir_dados, 'Composicao das Areas de Ponderacao.txt'),
locale = locale(encoding = 'UTF-16')
) %>% #filtra apenas município de São Paulo
filter(str_sub(Setor, 1, 7) == '3550308')
#| echo: false
# microdados da amostra
df_amostra <- vroom::vroom_fwf(
file = file.path(dir_dados, 'Amostra_Domicilios_35_RMSP.txt'),
col_positions = vroom::fwf_positions(
start = dic_amostra$POSICAO_INICIAL,
end = dic_amostra$POSICAO_FINAL,
col_names = dic_amostra$VAR
),
col_select = c('V0001', 'V0002','V0010', 'V0300',
'V0011', 'V6532', 'V6530')) %>%
# ajustando casas decimais
mutate(
across(
.cols = c('V0010', 'V6532', 'V6530'),
.fns = ajusta_decimal
)
)
#| echo: false
df_universo <- read_delim(
file.path(dir_dados, 'DomicilioRenda_SP1.csv'),
delim = ';',
na = 'X'
)
# relação entre áreas de ponderação (amostra) e setores censitários
relacao_areap_setor <- read_tsv(
file.path(dir_dados, 'Composicao das Areas de Ponderacao.txt'),
locale = locale(encoding = 'UTF-16')
) %>% #filtra apenas município de São Paulo
filter(str_sub(Setor, 1, 7) == '3550308')
#| echo: false
# categorias existentes
var_restritivas <- c('V014', paste0('V', str_pad(5:13, 3, pad = '0')))
df_amostra_sp <- df_amostra %>%
filter(
# filtra município de São Paulo
paste0(V0001,V0002) == '3550308',
# filtra domicílios que não responderam a renda
!is.na(V6532)) %>%
mutate(
# cria relação com os mesmos nomes da universo
v_restritiva = cut(
V6532,
breaks = c(-1, 0, 1/8, 1/4, 1/2, 1, 2, 3, 5, 10, 2000),
labels = var_restritivas,
),
# variavel de interesse da microssimulação
# renda domiciliar bruta em salários mínimos
v_alvo = cut(
V6530,
breaks = c(-1, 3, 10, 4000),
labels = c('G1', 'G2', 'G3')
))
#| echo: false
df_universo_rest <- df_universo %>%
select(
all_of(c(
'Cod_setor',
var_restritivas)
))) %>%
#| echo: false
df_universo_rest <- df_universo %>%
select(
all_of(c(
'Cod_setor',
var_restritivas
))) %>%
column_to_rownames('Cod_setor') %>%
mutate(Cod_setor = rownames(.)) %>%
drop_na()
int_trs <- function(x){
# For generalisation purpose, x becomes a vector
xv <- as.vector(x) # allows trs to work on matrices
xint <- floor(xv) # integer part of the weight
r <- xv - xint # decimal part of the weight
def <- round(sum(r)) # the deficit population
# the weights be 'topped up' (+ 1 applied)
if(sum(r)>0){
topup <- sample(length(x), size = def, prob = r)
xint[topup] <- xint[topup] + 1
}
dim(xint) <- dim(x)
dimnames(xint) <- dimnames(x)
xint
}
# identifica todas as aps de São Paulo
areas_ponderacao <- unique(relacao_areap_setor$`Área de ponderação`)
# rotina para cada área de ponderação
setor_grupos <- map_df(areas_ponderacao, function(ap){
message(ap)
# seleciona os setores de uma AP no universo
setores <- relacao_areap_setor %>%
filter(`Área de ponderação` == ap) %>%
.$Setor
universo_ap <- df_universo_rest %>%
filter(Cod_setor %in% setores) %>%
select(-Cod_setor)
# corrige os setores para adequar à mesma quantidade do universo
setores <- setores[setores %in% rownames(universo_ap)]
# seleciona os indivíduos da AP
amostra_ap <- df_amostra_sp %>%
filter(V0011 == ap)
## estrutura os dados de entrada
weight_init <- table(amostra_ap[,c('v_restritiva', 'v_alvo')])
weight_zones <- rep(weight_init,
each = length(setores))
weight_zones <- array(weight_zones,
dim = c(length(setores), length(var_restritivas), 3),
dimnames = c(list(setores), as.list(dimnames(weight_init))))
# alvo de valores totais de cada setor
target <- list(as.matrix(universo_ap)) # remove Cod_setor
# ordem das variáveis restritivas
descript <- list(1:2)
## implementação do Ipf
weight_mipfp <- Ipfp(seed = weight_zones,
target.list = descript,
target.data = target,
tol = 1e-5)
weight_mipfp <- weight_mipfp$x.hat
## inteirização por Truncate, Replicate, Sample para cada setor
walk(setores, function(setor){
weight_mipfp[as.character(setor),,] <- int_trs(weight_mipfp[as.character(setor),,])
})
## expansão e total da variável alvo por setor
# margens do universo
margens_universo <- data.frame(Cod_setor = rownames(universo_ap),
total_uni = rowSums(universo_ap))
setores_mipfp <- as.data.frame.table(weight_mipfp) %>%
rename(peso = Freq,
Cod_setor = Var1) %>%
group_by(Cod_setor, v_alvo) %>%
summarise(total = sum(peso), .groups = 'drop_last') %>%
pivot_wider(
id_cols = 'Cod_setor',
names_from = 'v_alvo',
values_from = 'total',
values_fill = 0
) %>%
ungroup() %>%
mutate(total_sim = G1+G2+G3) %>%
left_join(margens_universo, by = 'Cod_setor') %>%
mutate(erro = total_uni - total_sim)
setores_mipfp
})
# total de domicílios
sum(setor_grupos[,c('G1', 'G2', 'G3')])
# total de democílios do mestrado
setor_grupos_mestrado <- read_csv(file.path(dir_dados, 'population_micro_censustract.csv'))
# total de democílios do mestrado
setor_grupos_mestrado <- read_csv(file.path(dir_proj, 'data', 'population', 'population_micro_censustract.csv'))
sum(setor_grupos_mestrado[,c('G1', 'G2', 'G3')], na.rm= T)
#| message: false
# bibliotecas necessárias
library(tidyverse)
library(sf)
library(mipfp)
# pasta do projeto
dir_proj <- here::here()
# pasta com os dados
dir_dados <- file.path(dir_proj, 'data', 'population', 'census2010')
# Libraries ----
library(tidyverse)
library(h3jsr)
grid_resolution <- 9
# Files ----
msp <- sf::st_read('data/shp/MSP.shp') %>%
sf::st_transform(crs = 4326) # WGS84 degrees
# get the ids
# get the unique h3 ids of the hexagons intersecting your polygon at a given resolution
hex <- polygon_to_cells(census_sf, res = grid_resolution, simple = FALSE)
# get the ids
# get the unique h3 ids of the hexagons intersecting your polygon at a given resolution
hex <- polygon_to_cells(msp, res = grid_resolution, simple = FALSE)
# pass the h3 ids to return the hexagonal grid
hex <- unlist(hex$h3_addresses) %>%
cell_to_polygon(simple = FALSE)
grid <- hex %>%
mutate(id = h3_address) %>%
select(id)
sf::write_sf(grid, paste0('data/shp/grid_hex_MSP_', grid_resolution, '.shp'))
points <- grid %>%
rowwise() %>%
mutate(coords = paste0(sf::st_coordinates(cell_to_point(id)), collapse=',')) %>%
separate(col = coords, into = c('X', 'Y'), sep=',') %>%
sf::st_drop_geometry()
write_csv(points, paste0('data/shp/grid_hex_MSP_', grid_resolution, '.csv'))
setwd("D:/OneDrive/Pesquisa/master_thesis")
(i) alguns contratos são referentes a diferentes unidades habitacionais que podem estar espacialmente distribuídas e não concentradas em um empreendimento;
#| echo: false
#| include: false
options(scipen=999)
#| message: false
#| warning: false
# bibliotecas necessárias
library(tidyverse)
library(sf)
library(readxl)
# pasta do projeto
dir_proj <- here::here()
# pasta com os dados
dir_dados <- file.path(dir_proj, 'data', 'population', 'census2010')
# pasta do projeto
dir_proj <- here::here()
# pasta com os dados
dir_dados <- file.path(dir_proj, 'data', 'housing', 'mcmv')
url <- 'http://www.consultaesic.cgu.gov.br/busca/dados/Lists/Pedido/Attachments/1301410/RESPOSTA_PEDIDO_2019_59017_000222.xlsx'
download.file(url, dir_dados)
download.file(url, file.path(dir_dados, 'RESPOSTA_PEDIDO_2019_59017_000222.xlsx'))
xls <- read_excel(file.path(dir_dados, 'RESPOSTA_PEDIDO_2019_59017_000222.xlsx'))
?read_excel
xls <- read_xlsx(file.path(dir_dados, 'RESPOSTA_PEDIDO_2019_59017_000222.xlsx'))
file.path(dir_dados, 'RESPOSTA_PEDIDO_2019_59017_000222.xlsx')
download.file(url, file.path(dir_dados, 'RESPOSTA_PEDIDO_2019_59017_000222.xlsx'))
xls <- read_xlsx(file.path(dir_dados, 'RESPOSTA_PEDIDO_2019_59017_000222.xlsx'))
download.file(url, file.path(dir_dados, 'RESPOSTA_PEDIDO_2019_59017_000222.xls'))
download.file(url, file.path(dir_dados, 'RESPOSTA_PEDIDO_2019_59017_000222.xls'))
xls <- read_xlsx(file.path(dir_dados, 'RESPOSTA_PEDIDO_2019_59017_000222.xls'))
xls <- read_xlsx(file.path(dir_dados, 'RESPOSTA_PEDIDO_2019_59017_000222.xls'))
xls <- read_xlsx(file.path(dir_dados, 'RESPOSTA_PEDIDO_2019_59017_000222.xlsx'))
head(xls)
xls <- read_xlsx(file.path(dir_dados, 'RESPOSTA_PEDIDO_2019_59017_000222.xlsx'),
skip = 3)
xls <- read_xlsx(file.path(dir_dados, 'RESPOSTA_PEDIDO_2019_59017_000222.xlsx'),
skip = 3)
xls
xls <- read_xlsx(file.path(dir_dados, 'RESPOSTA_PEDIDO_2019_59017_000222.xlsx'),
skip = 4)
xls
?read_xlsx
xls <- read_xlsx(file.path(dir_dados, 'RESPOSTA_PEDIDO_2019_59017_000222.xlsx'),
skip = 5)
xls
xls <- read_xlsx(file.path(dir_dados, 'RESPOSTA_PEDIDO_2019_59017_000222.xlsx'),
skip = 8)
xls
colnames(xls)
colnames(xls) <- str_replace_all(colnames(xls), '\r\n', ' ')
colnames(xls)
csv <- read_csv(file.path(dir_dados, 'mcmv_2009_2012.csv'))
colnames(csv)
csv <- read_csv(file.path(dir_dados, 'mcmv_rmsp_2009_2018.csv'))
csv <- read_csv(file.path(dir_dados, 'mcmv_rmsp_2009_2018.csv'))
colnames(csv)
unique(xls$Origem)
# renomeia as colunas
colnames(xls) <- c("cod_ibge", "pf_pj", "uf", "municipio", "faixa", "fase_mcmv",
"modalidade", "uh_contratadas", "uh_entregues", "uh_concluidas",
"valor_tot", "if", "and_obra", "empreendimento", "endereco",
"construtora", "cnpj", "data", "ano_contratacao")
rm(csv)
